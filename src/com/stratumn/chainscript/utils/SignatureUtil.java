package com.stratumn.chainscript.utils;

import java.util.Base64;

import com.google.protobuf.ByteString;
import com.stratumn.chainscript.Link;
import com.stratumn.chainscript.Signature;


public class SignatureUtil
{

   /**
    * Convert a plain object to a signature.
    * @param s plain object.
    */
   public static Signature fromObject(stratumn.chainscript.Chainscript.Signature signature)
   {
      if(signature.getSignature().isValidUtf8())
      {
         byte[] linkBytes = Base64.getEncoder().encode(signature.getSignature().toByteArray());
         signature.toBuilder().setSignature(ByteString.copyFrom(linkBytes)).build();
      }
      if(signature.getPublicKey().isValidUtf8())
      {
         byte[] linkBytes = Base64.getEncoder().encode(signature.getPublicKey().toByteArray());
         signature.toBuilder().setPublicKey(ByteString.copyFrom(linkBytes)).build();
      }
      return new Signature(signature);
   }

   /**
    * Sign bytes with the current signature version.
    * @param key private key in PEM format (generated by @stratumn/js-crypto).
    * @param toSign bytes that should be signed.
    */

   public static Signature sign(byte[] key, byte[] toSign)
   {
     
      return null;
   }

   /**
    * Sign configurable parts of the given link with the current signature
    * version.
    * The payloadPath is used to select what parts of the link need to be signed
    * with the given private key. If no payloadPath is provided, the whole link
    * is signed.
    * @param key private key in PEM format (generated by @stratumn/js-crypto).
    * @param link that should be signed.
    * @param payloadPath link parts that should be signed.
    */
   public static Signature signLink(byte[] key, Link link, String payloadPath)
   {
      
      return null;
   }

}
